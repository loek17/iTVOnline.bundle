#####################################################################
#
# File:        commen.pys
# Author:   Loek Wensveen
# Date:      03/01/2014
# Version: 1.0.0
# About:        This plugin alows jou to watch itvonline in plex form kpn
#
#####################################################################

from cookielib import Cookie

#####################################################################

DOMEIN_DICT = {
    'KPN' : 'www',
    'Telfort' : 'telfort'
}

#####################################################################

class LoginException(Exception):
    pass

def auth(Prefs , Force=False):
    def auth_deco(f):
        def real_auth(*args , **kwargs):

            SUB_DOMEIN = lambda : DOMEIN_DICT[Prefs['provider']]
            BASE_URL = lambda : "http://%s.itvonline.nl" % SUB_DOMEIN()
            API_URL = lambda : BASE_URL() + "/AVS/besc"
            
            time = Datetime.TimestampFromDatetime(Datetime.Now())
            
            if not NeedLogin(time) and not Force:
                prams = {
                    'action' : 'KeepAlive',
                    'channel' : 'PCTV'
                }
                url = buildURL(API_URL() , prams)
                data = JSON.ObjectFromURL(url , cacheTime=0)
                
                Log.Info(data)
                
                if not len(data['errorDescription']):
                    return f(*args , **kwargs)

            
            def add_cookie(key , value , max_age=False):
                cookie = Cookie(0, key, value, None, False, "%s.itvonline.nl" % SUB_DOMEIN() , False, None,
                 "/" , False , False, time+max_age , False , None, None, None)
                HTTP.Cookies.set_cookie(cookie)
            
            def GetProfile(tan):
                prams = {
                    'action' : 'GetProfile',
                    'channel' : 'PCTV',
                    'crmAccountId' : tan,
                    '_' : time
                }
                url = buildURL(API_URL() , prams)
                userData = JSON.ObjectFromURL(url)
                Log.Info(userData)

                if len(userData["errorDescription"]):
                    Log.Exception(userData)
                    raise LoginException(userData["errorDescription"])

                userData['resultObj']['pcVerified'] = 'no'
                if len(userData['resultObj']['packageList']) < 20:
                    Log.Info("Less than 20 packages : %d" % len(userData['resultObj']['packageList']))
                    add_cookie('UserInfoCookie' , JSON.StringFromObject(userData['resultObj']) , 30*60)
                else:
                    import math
                    Log.Info("More than 20 packages : %d" % len(userData['resultObj']['packageList']))
                    packs = userData['resultObj']['packageList']
                    userData['resultObj']['packageList'] = packs[0:19]
                    add_cookie('UserInfoCookie' , JSON.StringFromObject(userData['resultObj']) , 30*60)
        
                    count = 20
                    lengte = int(math.ceil(len(packs)/20)) + 1
                    
                    Log.Info(lengte)
                    
                    for i in range(1 , lengte):
                        add_cookie('UserInfoCookie%d' % i , JSON.StringFromObject( packs[count*i : 19+count*i] ) , 30*60)
            
            HTTP.ClearCookies()
            
            prams = {
                'action' : 'IpAuthentication',
                'channel' : 'PCTV'
            }
            url = buildURL(API_URL() , prams)
            data = JSON.ObjectFromURL(url , cacheTime=0)
            
            if len(data["errorDescription"]):
                Log.Exception(JSON.StringFromObject(data))
                if data['errorDescription'] == "ACN_3055":
                    raise LoginException("Login Error : Je bent niet binnen een netwerk van KPN of Telfort.")
                else:
                    raise LoginException("Login Error : %s" % data['message'])

            #add_cookie('kpn_tan' , data["resultObj"]["tan"] , 30*60)
            #add_cookie('isAlive' , 'true' , 30*60)
            #GetProfile(data['resultObj']['tan'])

            return f(*args , **kwargs)
        return real_auth
    return auth_deco
    

#####################################################################

DOMEIN_REGEX = Regex("\.itvonline\.nl$")
def NeedLogin(time):
    "this functions makes sure we only login if we absolutely have to"
    l = []
    for c in HTTP.Cookies:
        if c.name in ['ACE' , 'JSESSIONID' , 'avs_cookie'] and DOMEIN_REGEX.search(c.domain):
            l.append(c.name)
            if c.is_expired():
                return True
    for k in ['ACE' , 'JSESSIONID' , 'avs_cookie']:
        if k not in l:
            return True
    return False

#####################################################################

from datetime import datetime
import urllib
def buildURL(base , args):
    parms = {}
    for k ,v in args.iteritems():
        if isinstance(v , list):
            parms[k] = ";".join(v)
        elif isinstance(v , datetime):
            parms[k] = "%0.0f" % Datetime.TimestampFromDatetime(v)
        else:
            parms[k] = v
    #Log.Info("%s?%s" % (base , urllib.urlencode(parms)))
    return "%s?%s" % (base , urllib.urlencode(parms))

#####################################################################
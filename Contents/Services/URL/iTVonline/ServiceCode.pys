#####################################################################
#
# File:        ServiceCode.pys
# Author:   Loek Wensveen
# Date:      03/01/2014
# Version: 1.0.0
# About:        This plugin alows jou to watch itvonline in plex form kpn
#
#####################################################################

# no imports

#####################################################################

SUB_DOMEIN = lambda url : SUB_DOMEIN_DICT[DomeinRegex.search(url).group("sub_domein")]
BASE_URL = lambda url : u"http://%s.itvonline.nl" % SUB_DOMEIN(url)
API_URL = lambda url : BASE_URL(url) + u"/AVS/besc"
SEC_BASE_URL = lambda url : u"https://%s.itvonline.nl" % SUB_DOMEIN(url)
SEC_API_URL = lambda url : SEC_BASE_URL(url) + u"/AVS/besc"

DecryptKeyUrlRegex = Regex('#EXT-X-KEY:METHOD=AES-128,URI="(?P<decrypte_url>.*?)"(?P<playlist_iv>,IV=0x(?P<iv>.*))?')
BandwidthRegex = Regex('#EXT-X-STREAM-INF:PROGRAM-ID=\d+,BANDWIDTH=(?P<bandwidth>\d+)')
IdVideoRegex = Regex('/spelen/(?P<id>\d+)')
IdLiveRegex = Regex('channelId=(?P<id>\d+)')
DomeinRegex = Regex('http://(?P<sub_domein>.*)\.itvonline\.nl')
CookieRegex = Regex("\.itvonline\.nl$")

SUB_DOMEIN_DICT = {
    u'www' : u'iphone',
    u'telfort' : u'telfortiphone'
}

# not used but usefull
eHLS_CLIENTS = [
    ClientPlatform.iOS , 
    ClientPlatform.Android , 
    ClientPlatform.Roku,
    "Web Client",
    "PlexConnect",
    "Plex Samsung Smart Hub",
    "Plex Home Theater"
]

templog = Log.Info
import re
def log(string , *args , **kwargs):
    test = re.findall(r'X-Plex-Token=(\w+)', string)+['.'.join(m.group(0).split('.')[2:]) for m, _ in zip(re.finditer(r'((\d+\.){3}\d+)' , string) , range(1))]
    for match in test:
        string = string.replace(match , 'xxx')
    return templog(string , *args , **kwargs)

Log.Info = log

#####################################################################

class LoginException(Exception):
    pass

def auth(Force=False):
    def auth_deco(f):
        def real_auth(url , *args , **kwargs):
            if not NeedLogin() and not Force:
                try:
                    ret =  f(url , *args , **kwargs)
                except LoginException:
                    pass
                else:
                    prams = {
                        'action' : 'KeepAlive',
                        'channel' : 'IPAD'
                    }
                    DataUrl = buildURL(API_URL(url) , prams)
                    data = JSON.ObjectFromURL(DataUrl , cacheTime=0)

                    Log.Info(data)
                    
                    return ret

            HTTP.ClearCookies()
            
            prams = {
                'action' : 'IpAuthentication',
                'channel' : 'IPAD'
            }
            DataUrl = buildURL(SEC_API_URL(url) , prams)
            data = JSON.ObjectFromURL(DataUrl , cacheTime=0)
            
            if len(data["errorDescription"]):
                Log.Exception(JSON.StringFromObject(data))
                if data['errorDescription'] == "ACN_3055":
                    raise LoginException("Login Error : Je bent niet binnen een netwerk van KPN of Telfort.")
                else:
                    raise LoginException("Login Error : %s" % data['message'])

            return f(url , *args , **kwargs)
        return real_auth
    return auth_deco

def NeedLogin():
    "this functions makes sure we only login if we absolutely have to"
    l = []
    for c in HTTP.Cookies:
        if c.name in ['ACE' , 'JSESSIONID' , 'avs_cookie']:# and CookieRegex.search(c.domain):
            l.append(c.name)
            if c.is_expired():
                return True
    for k in ['ACE' , 'JSESSIONID' , 'avs_cookie']:
        if k not in l:
            return True
    return False

#####################################################################

def NormalizeURL(url):
    return url
    
def MetadataObjectForURL(url):
    time = int(Datetime.TimestampFromDatetime(Datetime.Now()))
    prams = {
        'action' : 'GetEpg',
        'channel' : 'PCTV',
        'channelId' : IdLiveRegex.search(url).group("id"),
        'startTimeStamp': time,
        'maxResultsPerChannel': 2
    }
    dataUrl = buildURL(API_URL(url) , prams)
    data = JSON.ObjectFromURL(dataUrl)
    program = data['resultObj']['channelList'][0]['programList'][0]
    
    # if the tv program ends in 3 min we show the next program
    if program['endTime'] < time + 3*60 and len(data['resultObj']['channelList'][0]['programList']) > 1:
        program = data['resultObj']['channelList'][0]['programList'][1]

    vc = VideoClipObject(
        title = program['title'],
        summary = '%s \n\n%s' %(program['subtitle'] , program['contentDescription']),
        duration = program['duration'] * 1000 - (time - program['startTime']),
        thumb = "/video/itvonline/imageHelper?id=%s&client=%s" % (IdLiveRegex.search(url).group("id") , Client.Product),
        art = "/video/itvonline/imageHelper?id=%s&art=True&client=%s" % (IdLiveRegex.search(url).group("id") , Client.Product)
    )
    return vc
    
def MediaObjectsForURL(url):
    
    Log.Info("Returning mediaObject")
    Log.Info("Client Platform : %s" % Client.Platform)
    Log.Info("Client Product : %s" % Client.Product)
    
    return [
        MediaObject(
            container               = 'mpegts',
            video_codec             = VideoCodec.H264,
            audio_codec             = AudioCodec.AAC,
            optimized_for_streaming = True,
            parts = [
                PartObject(
                    key=HTTPLiveStreamURL(Callback(PlayHTTPLiveStream , url=url , ext='m3u8'))
                )
             ]
        )
    ]

####################################################################################################

@indirect
def PlayHTTPLiveStream(url):
    try:
        m3u8_url = GetCDN(url)
    except LoginException as e:
        Log.Exception('unable to auth : Auth mislukt, bevindt u zich in een KPN netwerk?')
        raise Ex.MediaNotAuthorized
        #return ObjectContainer(header=u"Error" , message=unicode(e))
    except:
        Log.Exception('Error in getting CDN')
    
    if m3u8_url == "http://fl.media01.kpnstreaming.nl/vod/_definst_/kpn/itvonline/MTP-WEBTV-IPAD/KPNVIDEOS/INTRO/video-3.mp4/playlist.m3u8":
        Log.Info("############## Ex.MediaNotAvailable ###############")
        raise Ex.MediaNotAvailable
        #return ObjectContainer(header=u"Error" , message=u"Kanaal niet beschikbaar")
    
    #return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(m3u8_url))
    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(Callback(HTTPLiveStreamPlayList , m3u8_url=m3u8_url , ext='m3u8')))
    
####################################################################################################

def HTTPLiveStreamPlayList(m3u8_url):

    try:
        playlist = HTTP.Request(m3u8_url).content
    except:
        Log.Info(" Error downloading Masterplaylist")
        # Kpn does this sometime,  no idea why but we do it to
        return "#E"
    
    Log.Info(playlist)
    
    plexServerData = getPlexServerUrlData()
    callbackUrl = 'http://%s:%s%%s%s' % plexServerData
    newPlaylist = []
    for line in playlist.splitlines():
        if line.startswith('#'):
            if BandwidthRegex.match(line):
                bandwidth = BandwidthRegex.search(line).group('bandwidth')
            newPlaylist.append(line)
            continue
        else:
            if not line.startswith('http'):
                line = m3u8_url.rsplit('/' , 1)[0] + '/' + line
            newLine = callbackUrl % Callback(HTTPLiveSteamChunkList , url = line , bandwidth=bandwidth , authToken=plexServerData[2], ext='m3u8')
            newPlaylist.append(newLine)
    
    newPlaylist = '\n'.join(newPlaylist)+'\n'
    Log.Info(newPlaylist)
    
    return DataObject(newPlaylist , 'application/vnd.apple.mpegurl')

def HTTPLiveSteamChunkList(url , bandwidth , authToken):
    
    try:
        playlist =  HTTP.Request(url, cacheTime=0).content
    except:
        Log.Info(" Error downloading playlist , bandwidth = %s" % bandwidth)
        return "#E"

    Log.Info(playlist)

    newPlaylist = []
    for line in playlist.splitlines():
        if line.startswith('#'):
            if DecryptKeyUrlRegex.match(line):
                # proxy the decrypte key because the server is on a kpn network, the client isn't always
                decrypteUrl = DecryptKeyUrlRegex.search(line).group("decrypte_url")
                line = line.replace(decrypteUrl , Callback(HTTPLiveSteamPassword , url=decrypteUrl) + authToken)
            newPlaylist.append(line)
            continue
        else:
            if not line.startswith('http'):
                 newLine = url.rsplit('/' , 1)[0] + '/' + line
            newPlaylist.append(newLine)

    newPlaylist = '\n'.join(newPlaylist) + '\n'
    Log.Info(newPlaylist)

    return DataObject(newPlaylist , 'application/vnd.apple.mpegurl')

def HTTPLiveSteamPassword(url):
    # proxy the decrypte key because the server is on a kpn network, the client isn't always
    return HTTP.Request(url , cacheTime=CACHE_1HOUR).content
    
#####################################################################

@auth()
def GetCDN(url):
    prams = {
        'type' : 'LIVE',
        'id' : IdLiveRegex.search(url).group("id"),
        'action' : 'GetCDN',
        'deviceType' : 'iPhone;6.1;2.3.6;K',
        'channel' : 'IPAD'
    }
    hlsUrl = buildURL(SEC_API_URL(url) , prams)
    data = XML.ElementFromURL(hlsUrl , cacheTime=0)
    m3u8_url = data.find(".//channel[@src]").get('src')
    
    Log.Info(HTML.StringFromElement(data))
    Log.Info(m3u8_url)

    if data.find('.//meta[@name="code"]').get('content') != "200":
        raise LoginException("Login Error : Je hebt geen toestemming om dit kanaal te bekijken.")

    return m3u8_url
    
#####################################################################

import urllib
def getPlexServerUrlData():
    """ Return a tulp containing the  server ip , server port , and authtoken (authtoken is preflixed with '&X-Plex-Token=')"""
    try:
        dataStr = urllib.urlopen('http://localhost:32400/myplex/account').read()
        data = XML.ElementFromString(dataStr)
        if data.get('mappingState') != "mapped":
            raise Exception('dummy')
    except:
        Log.Info("######################## iTVonline - Using local ip adress ########################")
        authToken = ""
        port = "32400"
        adress = Network.Address
    else:
        Log.Info("######################## iTVonline - Using public ip adress ########################")
        authToken = '&X-Plex-Token=%s' % data.get('authToken')
        port = data.get('publicPort')
        adress = Network.PublicAddress
    
    Log.Info("Mapping data myPlex : adress=%s , port=%s , authtoken=%s" % (adress , port , authToken))
    
    return (adress , port , authToken)

from datetime import datetime
import urllib
def buildURL(base , args):
    parms = {}
    for k ,v in args.iteritems():
        if isinstance(v , list):
            parms[k] = ";".join(v)
        elif isinstance(v , datetime):
            parms[k] = "%0.0f" % Datetime.TimestampFromDatetime(v)
        else:
            parms[k] = v
    #Log.Info("%s?%s" % (base , urllib.urlencode(parms)))
    return "%s?%s" % (base , urllib.urlencode(parms))

#####################################################################
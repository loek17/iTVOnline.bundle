#####################################################################
#
# File:        ServiceCode.pys
# Author:   Loek Wensveen
# Date:      03/01/2014
# Version: 1.0.0
# About:        This plugin alows jou to watch itvonline in plex form kpn
#
#####################################################################

# no imports

#####################################################################

SUB_DOMEIN = lambda url : SUB_DOMEIN_DICT[DomeinRegex.search(url).group("sub_domein")]
BASE_URL = lambda url : u"http://%s.itvonline.nl" % SUB_DOMEIN(url)
API_URL = lambda url : BASE_URL(url) + u"/AVS/besc"
SEC_BASE_URL = lambda url : u"https://%s.itvonline.nl" % SUB_DOMEIN(url)
SEC_API_URL = lambda url : SEC_BASE_URL(url) + u"/AVS/besc"

DecryptKeyUrlRegex = Regex('#EXT-X-KEY:METHOD=AES-128,URI="(?P<decrypte_url>.*?)"(?P<playlist_iv>,IV=0x(?P<iv>.*))?')
BandwidthRegex = Regex('#EXT-X-STREAM-INF:PROGRAM-ID=\d+,BANDWIDTH=(?P<bandwidth>\d+)')
IdVideoRegex = Regex('/spelen/(?P<id>\d+)')
IdLiveRegex = Regex('channelId=(?P<id>\d+)')
DomeinRegex = Regex('http://(?P<sub_domein>.*)\.itvonline\.nl')

SUB_DOMEIN_DICT = {
    u'www' : u'iphone',
    u'telfort' : u'telfortiphone'
}

# not used but usefull
eHLS_CLIENTS = [
    ClientPlatform.iOS , 
    ClientPlatform.Android , 
    ClientPlatform.Roku,
    "Web Client",
    "PlexConnect",
    "Plex Samsung Smart Hub",
    "Plex Home Theater"
]

#####################################################################

MISS_EXT = u"poster-hl.jpg"
VIDEOTHEEK_EXT = u"poster-vl.jpg"

POSTER_URLS = [
    u"http://x0.itvonline.nl/kpn/kpnwebtv/%s/%s",
    u"http://x1.itvonline.nl/kpn/kpnwebtv/%s/%s",
    u"http://x2.itvonline.nl/kpn/kpnwebtv/%s/%s",
    u"http://x3.itvonline.nl/kpn/kpnwebtv/%s/%s",
    u"http://x4.itvonline.nl/kpn/kpnwebtv/%s/%s",
    u"http://x5.itvonline.nl/kpn/kpnwebtv/%s/%s"
]

HLS_TYPE = {
    'TVOD' : 'TRAILER',
    'SVOD' : 'TRAILER',
    'SVOD_CATCHUP' : 'VOD'
}

####################################################################################################

def NormalizeURL(url):
    return url.split('?' , 1)[0]

def MetadataObjectForURL(url):
    
    if needLoginIphone():
        try:
            iphoneAuth(url)
        except:
            failAuth = True
        else:
            failAuth = False
    else:
        failAuth = False
    
    prams = {
        'action' : 'GetContentDetails',
        'channel' : 'IPAD',
        'contentId' : IdVideoRegex.search(url).group("id")
    }
    dataUrl = buildURL(API_URL(url) , prams)
    Log.Info(dataUrl)
    data = JSON.ObjectFromURL(dataUrl , cacheTime=CACHE_1DAY)
    video = data['resultObj']['content']
    
    Log.Info(data['resultObj']['content'])

    try:
        rating = float(video[u'totalStars'])*2
    except:
        rating = 0
    try:
        content_rating_age = int(video[u'pcLevelVod'])
    except:
        content_rating_age = 0
    try:
        year = int(video[u'year'])
    except:
        year = 0
    
    if video['broadcastChannelName']:
        if failAuth:
            return ObjectContainer(header=u"Error" , message=u"Auth mislukt, bevindt u zich in een KPN netwerk?")
        vc = VideoClipObject(
            title = video['contentTitle'],
            genres = video['genre'].split(','),
            duration = video['duration']*1000,
            tagline = video['contentSubTitle'],
            summary = "%s , %s\n\n%s" % (video['contentSubTitle'] , video['broadcastChannelName'] , video['description']),
            rating = rating,
            content_rating = video['totalStars'],
            content_rating_age = content_rating_age,
            thumb = Resource.ContentsOfURLWithFallback(Util.RandomItemFromList(POSTER_URLS) % (video['urlPictures'] , MISS_EXT))
        )
        return vc
    else:
        mv = MovieObject(
            title = video[u'contentTitle'],
            genres = video[u'genre'].split(','),
            duration = video[u'duration'] * 1000,
            tagline = video[u'contentSubTitle'],
            summary = u"%s , met %s\n\nprijs : %.2f\n\n%s" % (video[u'contentSubTitle'] , video[u'actors'] , float(video[u'discountedPrice']/100) , video[u'description']),
            rating = rating,
            content_rating = video[u'totalStars'],
            content_rating_age = content_rating_age,
            year = year,
            thumb = Resource.ContentsOfURLWithFallback(Util.RandomItemFromList(POSTER_URLS) % (video[u'urlPictures'] , VIDEOTHEEK_EXT))
        )
        return mv
    
def MediaObjectsForURL(url):
    
    Log.Info("Returning mediaObject")
    Log.Info("Client Platform : %s" % Client.Platform)
    Log.Info("Client Product : %s" % Client.Product)
    
    return [
        MediaObject(
            container               = 'mpegts',
            video_codec             = VideoCodec.H264,
            audio_codec             = AudioCodec.AAC,          
            #audio_channels          = 2,
            optimized_for_streaming = True,
            parts = [
                PartObject(
                    key=HTTPLiveStreamURL(Callback(PlayHTTPLiveStreamPlayList ,  url=url , ext='m3u8'))
                )
            ]
        )
    ]

####################################################################################################

@indirect
def PlayHTTPLiveStreamPlayList(url):

    if needLoginIphone():
        try:
            iphoneAuth(url)
        except:
            failAuth = True
        else:
            failAuth = False
    else:
        failAuth = False
    
    prams = {
        'action' : 'GetContentDetails',
        'channel' : 'IPAD',
        'contentId' : IdVideoRegex.findall(url)[0]
    }
    dataUrl = buildURL(API_URL(url) , prams)
    data = JSON.ObjectFromURL(dataUrl , cacheTime=CACHE_1DAY)
    
    Log.Info(data)
    
    if data['resultObj']['content']['broadcastChannelName']:
        if failAuth:
            Log.Exception("Auth mislukt, bevindt u zich in een KPN netwerk?")
            return ObjectContainer(header=u"Error" , message=u"Auth mislukt, bevindt u zich in een KPN netwerk?")
    
    prams = {
        'type' : HLS_TYPE[data['resultObj']['content']['contentType']],
        'id' : IdVideoRegex.findall(url)[0],
        'action' : 'GetCDN',
        'deviceType' : 'iPhone;6.1;2.3.6;K',
        'channel' : 'IPAD'
    }
    hlsUrl = buildURL(SEC_API_URL(url) , prams)
    data = XML.ElementFromURL(hlsUrl)
    m3u8_url = data.find(".//video[@src]").get('src')
    
    Log.Info(HTML.StringFromElement(data))

    return IndirectResponse(VideoClipObject, key=HTTPLiveStreamURL(Callback(HTTPLiveStreamPlayList , m3u8_url=m3u8_url , ext='m3u8')))

####################################################################################################

def HTTPLiveStreamPlayList(m3u8_url):

    try:
        playlist = HTTP.Request(m3u8_url).content
    except:
        Log.Info(" Error downloading Masterplaylist")
        # Kpn does this sometime,  no idea why but we do it to
        return "#E"
    
    Log.Info(playlist)
    
    authToken = getPlexAuthToken()
    callbackUrl = 'http://%s:32400%%s%s' % (Network.PublicAddress , '&X-Plex-Token=%s' % authToken) if authToken else (Network.Address , '')
    newPlaylist = []
    for line in playlist.splitlines():
        if line.startswith('#'):
            if BandwidthRegex.match(line):
                bandwidth = BandwidthRegex.search(line).group('bandwidth')
            newPlaylist.append(line)
            continue
        else:
            if not line.startswith('http'):
                line = m3u8_url.rsplit('/' , 1)[0] + '/' + line
            newLine = callbackUrl % Callback(HTTPLiveSteamChunkList , url = line , bandwidth=bandwidth , authToken=authToken, ext='m3u8')
            newPlaylist.append(newLine)
    
    newPlaylist = '\n'.join(newPlaylist)+'\n'
    Log.Info(newPlaylist)
    
    return DataObject(newPlaylist , 'application/vnd.apple.mpegurl')

def HTTPLiveSteamChunkList(url , bandwidth , authToken):
    
    try:
        playlist =  HTTP.Request(url, cacheTime=0).content
    except:
        Log.Info(" Error downloading playlist , bandwidth = %s" % bandwidth)
        return

    Log.Info(playlist)

    newPlaylist = []
    for line in playlist.splitlines():
        if line.startswith('#'):
            if DecryptKeyUrlRegex.match(line):
                # proxy the decrypte key because the server is on a kpn network, the client isn't always
                decrypteUrl = DecryptKeyUrlRegex.search(line).group("decrypte_url")
                line = line.replace(decrypteUrl , Callback(HTTPLiveSteamPassword , url=decrypteUrl) + ('&X-Plex-Token=%s' % authToken if authToken else ''))
            newPlaylist.append(line)
            continue
        else:
            if not line.startswith('http'):
                 newLine = url.rsplit('/' , 1)[0] + '/' + line
            newPlaylist.append(newLine)

    newPlaylist = '\n'.join(newPlaylist) + '\n'
    Log.Info(newPlaylist)

    return DataObject(newPlaylist , 'application/vnd.apple.mpegurl')

def HTTPLiveSteamPassword(url):
    # proxy the decrypte key because the server is on a kpn network, the client isn't always
    return HTTP.Request(url , cacheTime=CACHE_1HOUR).content
    
#####################################################################

import urllib2
def getPlexAuthToken():
    """ get the plextoken to use if the client isn't local, is there a better why to do this?? """
    try:
        authToken = XML.ElementFromString(urllib2.urlopen('http://localhost:32400/myplex/account').read()).get('authToken')
    except:
        authToken = None
    return authToken

def iphoneAuth(url):

    HTTP.ClearCookies()
    
    prams = {
        'deviceType' : 'iPhone;6.1;2.3.6;K',
        'action' : 'IpAuthentication',
        'channel' : 'IPAD'
    }
    url = buildURL(SEC_API_URL(url) , prams)
    info = JSON.ObjectFromURL(url , cacheTime=0)
        
    if len(info["errorDescription"]):
        raise Ex.MediaGeoblocked

DOMEIN_REGEX = Regex("iphone\.itvonline\.nl$")
def needLoginIphone():
    "this functions makes sure we only login if we absolutely have to"
    l = []
    for c in HTTP.Cookies:
        if c.name in ['ACE' , 'JSESSIONID' , 'avs_cookie'] and DOMEIN_REGEX.search(c.domain):
            l.append(c.name)
            if c.is_expired():
                return True
    for k in ['ACE' , 'JSESSIONID' , 'avs_cookie']:
        if k not in l:
            return True
    return False

from datetime import datetime
import urllib
def buildURL(base , args):
    parms = {}
    for k ,v in args.iteritems():
        if isinstance(v , list):
            parms[k] = ";".join(v)
        elif isinstance(v , datetime):
            parms[k] = "%0.0f" % Datetime.TimestampFromDatetime(v)
        else:
            parms[k] = v
    #Log.Info("%s?%s" % (base , urllib.urlencode(parms)))
    return "%s?%s" % (base , urllib.urlencode(parms))

#####################################################################